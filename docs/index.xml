<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Shamsuddeen Hassan Muhammad&#39;s Blog</title>
<link>https://shmuhammadblog.github.io/index.html</link>
<atom:link href="https://shmuhammadblog.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Shamsuddeen Muhammad Blog</description>
<generator>quarto-99.9.9</generator>
<lastBuildDate>Sun, 18 Dec 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>PathLib: Yet Another Python file and directory managament</title>
  <link>https://shmuhammadblog.github.io/blog/python_pathlib/pathlib.html</link>
  <description><![CDATA[ 



<section id="pathlib-a-path-management-library-called-pathlib." class="level2">
<h2 class="anchored" data-anchor-id="pathlib-a-path-management-library-called-pathlib.">PathLib: A path management library called Pathlib.</h2>
<ul>
<li><p>Why You Should Start Using Pathlib as an Alternative to the OS Module</p></li>
<li><p>Pathlib is a module in the Python standard library that provides classes for working with file and directory paths.</p></li>
<li><p>It is designed to be more intuitive and easier to use than the traditional <code>os.path</code> module, which is based on string manipulation and can be error-prone.</p></li>
<li><p>The Path class in pathlib represents a <code>file</code> or <code>directory path</code> and offers a convenient way to perform various operations on paths, such as reading and writing files, traversing directories, and checking the existence of files and directories.</p></li>
<li><p>Below is an example of using pathlib to read a file and print its contents:</p></li>
</ul>
<div id="cell-4" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the file in read-only mode</span></span>
<span id="cb1-4">path_name  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file.txt'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># i am in the same directory as the file</span></span>
<span id="cb1-5">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(path_name)</span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> file_path.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the contents of the file</span></span>
<span id="cb1-8">    contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the contents of the file</span></span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(contents)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hey i love this car
hey i love this bike
hey i love this bicycle
</code></pre>
</div>
</div>
</section>
<section id="join-path-with-pathlib" class="level2">
<h2 class="anchored" data-anchor-id="join-path-with-pathlib">Join path with pathlib</h2>
<ul>
<li><p>The <code>joinpath()</code> method is used to join one or more path components to the end of the path.</p></li>
<li><p>The <code>joinpath()</code> method returns a new path object that is the concatenation of the path and the path components passed as arguments.`</p></li>
<li><p>The <code>joinpath()</code> method is similar to the <code>os.path.join()</code> function.</p></li>
<li><p>An example of using the <code>joinpath()</code> method to join two path components to the end of the path:</p></li>
</ul>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-2"></span>
<span id="cb3-3">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home'</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.joinpath(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file.txt'</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(path)</span>
<span id="cb3-8"></span>
<span id="cb3-9">```</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> The output of the above program <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span>:</span>
<span id="cb3-12"></span>
<span id="cb3-13">```python</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>home<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.txt</span>
<span id="cb3-16"></span>
<span id="cb3-17">```</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> The `joinpath()` method can also be used to join a string to the end of the path:</span>
<span id="cb3-20"></span>
<span id="cb3-21">```python </span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-24"></span>
<span id="cb3-25">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home'</span>)</span>
<span id="cb3-26"></span>
<span id="cb3-27">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.joinpath(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user/file.txt'</span>)</span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(path)</span>
<span id="cb3-30"></span>
<span id="cb3-31">```</span></code></pre></div>
</div>
<p>Pathlib is part of the standard Python library and has been introduced since Python 3.4 (see PEP 428) with the goal of representing paths not as simple strings but as supercharged Python objects with many useful methods and attributes under the hood.</p>
<ul>
<li></li>
<li></li>
</ul>
<p><img src="https://shmuhammadblog.github.io/blog/python_pathlib/2022-12-18-19-31-26.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://shmuhammadblog.github.io/blog/python_pathlib/pathlib.html</guid>
  <pubDate>Sun, 18 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://shmuhammadblog.github.io/blog/python_pathlib/pathlib.png" medium="image" type="image/png" height="109" width="144"/>
</item>
<item>
  <title>Pytorch Tensor 101</title>
  <link>https://shmuhammadblog.github.io/blog/tensor/tensor.html</link>
  <description><![CDATA[ 



<section id="pytorch" class="level2">
<h2 class="anchored" data-anchor-id="pytorch">PyTorch</h2>
<p>PyTorch is a Python-based open source and scientific computing package for building neural networks. It is dynamic graph-based framework that allows you to define your neural network in a way that is easy to understand and debug. Today, PyTorch is the <a href="https://paperswithcode.com/trends">most used deep learning framework</a> and mostly use by researchers and engineers.</p>
<p><img src="https://shmuhammadblog.github.io/blog/tensor/pytorch_most_used.png" class="img-fluid"></p>
<p>PyTorch support GPU acceleration (making your code run faster) behind the scenes, better than NumPy. PyTorch also provides Autograd for automatic differentiation, which means that your code is automatically differentiated and you can use it to do backpropagation</p>
</section>
<section id="pytoch-installation" class="level2">
<h2 class="anchored" data-anchor-id="pytoch-installation">Pytoch Installation</h2>
<p>Before you installed Pytorch, you need to install the following dependencies: Package Manager (e.g.&nbsp;pip, conda), Python, Numpy. For more information, please refer to the <a href="https://pytorch.org/">Pytorch documentation</a>.</p>
<p>For me, I am using mac and conda as package manager, I therefore run the following command</p>
</section>
<section id="verification" class="level2">
<h2 class="anchored" data-anchor-id="verification">VERIFICATION</h2>
<p>To verify your installation works,</p>
<div id="2a86dcb4" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>)</span>
<span id="cb1-3">torch.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'1.13.0.dev20220611'</code></pre>
</div>
</div>
</section>
<section id="what-is-tensor" class="level2">
<h2 class="anchored" data-anchor-id="what-is-tensor">What is Tensor</h2>
<ul>
<li><p>Assume we have 3 bedrooms, 1 carpark and 2 bathrooms. We can represent this data numerically in a form of vector [3, 1,2] to describe bedrooms, carpark and bathrooms</p></li>
<li><p>Tensor are the standard way of representing data in Pytorch, such as text, images, and audio. Their job is to represent data in a numerical way.</p></li>
</ul>
<p><img src="https://shmuhammadblog.github.io/blog/tensor/tensor_represent_data.png" class="img-fluid"></p>
<p><img src="https://shmuhammadblog.github.io/blog/tensor/tensor_loop.png" class="img-fluid"></p>
</section>
<section id="is-tensor-all-you-need" class="level2">
<h2 class="anchored" data-anchor-id="is-tensor-all-you-need">is Tensor all you need?</h2>
<ul>
<li><p>There are many Python Data Structure for holding data including Python List and Numpy Array. List and Numpy Array operations are similar to Pytorch Tensor.</p></li>
<li><p>Let us remember the basic of data structures in Python (List and Numpy Array) before we start using Pytorch Tensor</p></li>
</ul>
</section>
<section id="from-python-lists-to-numpy-array" class="level2">
<h2 class="anchored" data-anchor-id="from-python-lists-to-numpy-array">From Python lists to Numpy Array</h2>
<ul>
<li><p>Python does not have built-in support for Arrays, but Python Lists can be used instead.</p></li>
<li><p>Using our previous example, we can create a list of Python lists below.</p></li>
</ul>
<div id="8fc5f7e9" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">a_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#A list is the Python equivalent of an array</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_list) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the list</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(a_list))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the type</span></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subset the list</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[3, 1, 2]
&lt;class 'list'&gt;
3</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>However, Python lists has the following limitations: It takes large memory size and slow.</p>
</blockquote>
<ul>
<li><p>Numpy solved the problems with List:</p>
<ul>
<li><p>Size - Numpy data structures take up less space</p></li>
<li><p>Performance - they have a need for speed and are faster than lists</p></li>
<li><p>Functionality - SciPy and NumPy have optimized functions such as linear algebra operations built in.</p></li>
</ul></li>
</ul>
<div id="9b827ad4" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2">a_numpy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating a numpy array</span></span>
<span id="cb5-3">a_numpy</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([1, 3, 4])</code></pre>
</div>
</div>
<div id="57b93feb" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(a_numpy) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nd arrays</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>numpy.ndarray</code></pre>
</div>
</div>
<div id="0ccf25c1" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">a_numpy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can subset similar to Python list</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>1</code></pre>
</div>
</div>
<div id="ca7f84cb" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">a_numpy.shape <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape of the nd array</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(3,)</code></pre>
</div>
</div>
<div id="dbb59e6d" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">a_numpy.dtype <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dtype of the nd array</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>dtype('int64')</code></pre>
</div>
</div>
<div id="de17db96" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">a_numpy.size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of the nd array</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>3</code></pre>
</div>
</div>
<section id="performance-comparison-between-python-lists-and-numpy-arrays" class="level3">
<h3 class="anchored" data-anchor-id="performance-comparison-between-python-lists-and-numpy-arrays">Performance comparison between Python lists and Numpy Arrays</h3>
<div id="6c25bf4b" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb17-3"></span>
<span id="cb17-4"></span>
<span id="cb17-5">size_of_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pure_python_version():</span>
<span id="cb17-8">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb17-9">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(size_of_vec)</span>
<span id="cb17-10">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(size_of_vec)</span>
<span id="cb17-11">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [X[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X)) ]</span>
<span id="cb17-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t1</span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> numpy_version():</span>
<span id="cb17-15">    t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb17-16">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(size_of_vec)</span>
<span id="cb17-17">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(size_of_vec)</span>
<span id="cb17-18">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Y</span>
<span id="cb17-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t1</span>
<span id="cb17-20"></span>
<span id="cb17-21"></span>
<span id="cb17-22">t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pure_python_version()</span>
<span id="cb17-23">t2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numpy_version()</span>
<span id="cb17-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(t1, t2)</span>
<span id="cb17-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numpy is in this example "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(t1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>t2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" faster!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.00019288063049316406 0.0005578994750976562
Numpy is in this example 0.3457264957264957 faster!</code></pre>
</div>
</div>
</section>
</section>
<section id="from-numpy-arrays-to-torch-tensor" class="level2">
<h2 class="anchored" data-anchor-id="from-numpy-arrays-to-torch-tensor">From Numpy Arrays to Torch Tensor</h2>
<ul>
<li>Tensors are like arrays, both are data structures that are used to store data. Tensor and Numpy arrays share common operations such as shape and size.</li>
</ul>
<blockquote class="blockquote">
<p>Tensors are generalization of vectors and matrices to an arbitrary number of dimensions.</p>
</blockquote>
<p><img src="https://shmuhammadblog.github.io/blog/tensor/tensor_generalization.png" class="img-fluid"></p>
<ul>
<li><p>Similar to how Numpy provides additional support not available in the Python list, so also Tensors provides support not available in Numpy array such as:</p>
<ul>
<li><p>GPU acceleration , which is a great advantage for deep learning,</p></li>
<li><p>distribute operations on multiple devices or machines,and</p></li>
<li><p>keep track of the graph of computations that created them ( usefull for backpropagation).</p></li>
</ul></li>
</ul>
</section>
<section id="let-us-learn-tensor" class="level2">
<h2 class="anchored" data-anchor-id="let-us-learn-tensor">Let us Learn Tensor</h2>
<p>Various operations are available on tensors. In the next sections, we will discuss the following operations:</p>
<ul>
<li><p>Creating tensors.</p></li>
<li><p>Operations with tensors.</p></li>
<li><p>Indexing, slicing, and joining with tensors Computing gradients with tensors.</p></li>
<li><p>Using CUDA/MPS tensors with GPUs.</p></li>
</ul>
</section>
<section id="creating-tensors" class="level2">
<h2 class="anchored" data-anchor-id="creating-tensors">Creating tensors</h2>
<ul>
<li>PyTorch allows us to create tensors in many different ways using the torch package. We will discuss some of these ways.</li>
</ul>
<section id="creating-random-tensor-with-a-specific-size" class="level3">
<h3 class="anchored" data-anchor-id="creating-random-tensor-with-a-specific-size">Creating Random Tensor with a specific size</h3>
<blockquote class="blockquote">
<p><code>torch.tensor</code> is a general Tensor constructor that infer the data type automatically.</p>
</blockquote>
<div id="59357309" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb19-2"></span>
<span id="cb19-3">a_random <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a random tensor</span></span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([3, 4])</code></pre>
</div>
</div>
<div id="9678196d" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the shape of the random tensor</span></span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.size()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the size of the random tensor</span></span>
<span id="cb21-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(a_random)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the type of the random tensor</span></span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the type of the random tens</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([2])
torch.Size([2])
&lt;class 'torch.Tensor'&gt;
torch.LongTensor</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Note: .shape is an alias for .size(), and was added to closely match numpy !</p>
</blockquote>
<ul>
<li>Intead of allowing the <code>torch.tensor</code> to automatically determine the data type, you can explicitly specify the type of the data type by using the <code>torch.type</code> parameter</li>
</ul>
<div id="a72a2dce" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb23-2"></span>
<span id="cb23-3">a_random <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a random tensor</span></span>
<span id="cb23-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([3., 4.])</code></pre>
</div>
</div>
<div id="42926488" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the shape of the random tensor</span></span>
<span id="cb25-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.size()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the size of the random tensor</span></span>
<span id="cb25-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(a_random)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print the type of the random tensor</span></span>
<span id="cb25-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([2])
torch.Size([2])
&lt;class 'torch.Tensor'&gt;
torch.FloatTensor</code></pre>
</div>
</div>
<ul>
<li>You can also change an existing tensor type by using the</li>
</ul>
<div id="6d45dc48" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">a_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) </span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor type</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.LongTensor</code></pre>
</div>
</div>
<p>We can change from LongTensor t:</p>
<div id="96ba6a81" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">a_short <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  a_torch.short() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to short,  </span></span>
<span id="cb29-2">a_float <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  a_torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to float()</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_short.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor type</span></span>
<span id="cb29-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_float.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tensor type</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.ShortTensor
torch.FloatTensor</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Note: A variant of <code>torch.tensor</code> constructor is <code>torch.FloatTensor</code>constructor. When use, the default tensor type is <code>FloatTensor</code>. Infact, torch.Tensor is an alias for the <code>torch.FloatTensor</code> constructor.</p>
</blockquote>
<ul>
<li>The following two examples are equivalent:</li>
</ul>
<div id="55478c68" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">a_random <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a random tensor</span></span>
<span id="cb31-2">b_random <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.FloatTensor((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a random tensor</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>())</span>
<span id="cb31-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(b_random.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.FloatTensor
torch.FloatTensor</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>I would recommend to stick to <code>torch.tensor</code>, if you would like to change the type, you can change</p>
</blockquote>
<p>Torch defines 10 tensor types with CPU and GPU variants: <a href="https://pytorch.org/docs/stable/tensors.html#data-types">See different Pytorch Data Types</a>:</p>
<ul>
<li><p>The most common type (and generally the default) is torch.float32 or torch.float. This is referred to as “32-bit floating point”.</p></li>
<li><p>But there’s also 16-bit floating point (torch.float16 or torch.half) and 64-bit floating point (torch.float64 or torch.double).</p></li>
<li><p>The reason for all of these is to do with precision in computing. Precision is the amount of detail used to describe a number.</p></li>
<li><p>The higher the precision value (8, 16, 32), the more detail and hence data used to express a number.</p></li>
<li><p>This matters in deep learning and numerical computing because you’re making so many operations, the more detail you have to calculate on, the more compute you have to use.</p></li>
</ul>
<blockquote class="blockquote">
<p>So, lower precision datatypes are generally faster to compute on but sacrifice some performance on evaluation metrics like accuracy (faster to compute but less accurate).</p>
</blockquote>
</section>
<section id="creating-tensors-from-random-numbers" class="level3">
<h3 class="anchored" data-anchor-id="creating-tensors-from-random-numbers">2: Creating Tensors from Random Numbers</h3>
<p>Similar to the numpy, we can create a tensor from a random number.</p>
<div id="0756e85e" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">a_random_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uniform random distribution numbers between 0 and 1</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a_numpy_rand = np.random.randn(2,3) #numpy random normal distribution</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random_torch)</span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(a_numpy_rand)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 0.0461,  0.4024, -1.0115],
        [ 0.2167, -0.6123,  0.5036]])</code></pre>
</div>
</div>
<div id="d202c87a" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">a_random_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random normal distribution</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a_numpy_rand = np.random.rand(2,3) </span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_random_torch)</span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(a_numpy_rand)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[0.7749, 0.8208, 0.2793],
        [0.6817, 0.2837, 0.6567]])</code></pre>
</div>
</div>
</section>
<section id="creating-a-filled-tensor" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-filled-tensor">3: Creating a filled tensor</h3>
<div id="b2c94999" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">a_same_scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb37-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_same_scalar)</span>
<span id="cb37-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_same_scalar.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
torch.Size([3, 3])</code></pre>
</div>
</div>
<div id="b5821f87" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.ones(size=(3, 3)) </span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([[1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.]])</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Any PyTorch method with an underscore (_) refers to an in­place operation;</p>
</blockquote>
<div id="8c68ff1f" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">a_zero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb41-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_zero)</span>
<span id="cb41-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_zero.fill_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inplace operation</span></span>
<span id="cb41-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a_zero)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a_zero is now filled with 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.]])
tensor([[5., 5., 5.],
        [5., 5., 5.]])
tensor([[5., 5., 5.],
        [5., 5., 5.]])</code></pre>
</div>
</div>
<p>###4: Creating and initializing a tensor from lists</p>
<div id="a3f01c30" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">a_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb43-2">a_list</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([1, 2, 3])</code></pre>
</div>
</div>
</section>
<section id="creating-and-initializing-a-tensor-from-numpy-arrays" class="level3">
<h3 class="anchored" data-anchor-id="creating-and-initializing-a-tensor-from-numpy-arrays">5: Creating and initializing a tensor from numpy arrays</h3>
<ul>
<li>We use <code>torch.from_numpy</code> to create a tensor from a numpy array.</li>
</ul>
<div id="ddd87208" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb45-2">numpy_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) </span>
<span id="cb45-3">numpy_array</span>
<span id="cb45-4"></span>
<span id="cb45-5">torch_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(numpy_array) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensor from numpy array</span></span>
<span id="cb45-6">torch_tensor</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor([[0.3487, 0.9072, 0.8480],
        [0.7245, 0.6970, 0.4976]], dtype=torch.float64)</code></pre>
</div>
</div>
<div id="7710744e" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">torch_tensor.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>'torch.DoubleTensor'</code></pre>
</div>
</div>
<ul>
<li>The datatype after creating of tensor from numpy array is DoubleTensor instead of the default FloatTensor. This corresponds with the data type of the NumPy random matrix, a <code>float64</code>,</li>
</ul>
<blockquote class="blockquote">
<p>You can always convert from PyTorch tensors to Numpy arrays using the numpy function torch.numpy().</p>
</blockquote>
<div id="1c13411a" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">torch_tensor.numpy()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array([[0.3487288 , 0.90720583, 0.84795941],
       [0.72447844, 0.69699952, 0.49759155]])</code></pre>
</div>
</div>
</section>
<section id="creating-a-range-and-tensors-like" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-range-and-tensors-like">6: Creating a range and tensors like</h3>
<div id="bb7b3a15" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use torch.arange(), torch.range() is deprecated </span></span>
<span id="cb51-2">zero_to_ten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) </span>
<span id="cb51-3">zero_to_ten</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre>
</div>
</div>
</section>
<section id="creating-tensor-of-type-with-the-same-shape-as-another-tensor." class="level3">
<h3 class="anchored" data-anchor-id="creating-tensor-of-type-with-the-same-shape-as-another-tensor.">Creating tensor of type with the same shape as another tensor.</h3>
<div id="7ae26464" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Can also create a tensor of zeros similar to another tensor</span></span>
<span id="cb53-2">ten_zeros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zero_to_ten) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will have same shape</span></span>
<span id="cb53-3">ten_zeros</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</code></pre>
</div>
</div>
</section>
<section id="creating-named-tensors" class="level3">
<h3 class="anchored" data-anchor-id="creating-named-tensors">Creating Named Tensors</h3>
<ul>
<li><p>Named Tensors allow users to give explicit names to tensor dimensions.</p></li>
<li><p>In most cases, operations that take dimension parameters will accept dimension names, avoiding the need to track dimensions by position.</p></li>
</ul>
<div id="d470d86a" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/var/folders/1h/b7ng0kgj3w78mg7n8k7q7rch0000gn/T/ipykernel_11570/697701580.py:1: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1654931446436/work/c10/core/TensorImpl.h:1489.)
  torch.zeros(2, 3, names=('N', 'C'))</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.]], names=('N', 'C'))</code></pre>
</div>
</div>
<ul>
<li>We can use <code>names</code> to access tensor dimensions.</li>
</ul>
<div id="3ee5340c" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> , names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'W'</span>)) </span>
<span id="cb58-2">imgs.names</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>('N', 'C', 'H', 'W')</code></pre>
</div>
</div>
<div id="00e083e0" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">imgs.names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>'N'</code></pre>
</div>
</div>
</section>
</section>
<section id="tensor-properties" class="level2">
<h2 class="anchored" data-anchor-id="tensor-properties">Tensor properties</h2>
<p>Tensor has many properties including the following properties: the number of dimensions, the size, the type:</p>
<section id="tensor-dimensions" class="level3">
<h3 class="anchored" data-anchor-id="tensor-dimensions">Tensor Dimensions</h3>
<p>We can find the tensor dimensions using:<code>ndim</code></p>
<div id="ec6d00c7" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scalar</span></span>
<span id="cb62-2">scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb62-3">scalar</span>
<span id="cb62-4"></span>
<span id="cb62-5">scalar.ndim</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>0</code></pre>
</div>
</div>
<div id="2d74b748" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">MATRIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb64-2">                       [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]])</span>
<span id="cb64-3"></span>
<span id="cb64-4">MATRIX.ndim</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>2</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>You can tell the number of dimensions a tensor in PyTorch has by the number of square brackets on the outside ([) and you only need to count one side of the brackets.</p>
</blockquote>
<p>In practice, you’ll often see scalars and vectors denoted as lowercase letters such as y or a. And matrices and tensors denoted as uppercase letters such as X or W</p>
</section>
</section>
<section id="manipulating-tensors-tensor-operations" class="level2">
<h2 class="anchored" data-anchor-id="manipulating-tensors-tensor-operations">Manipulating tensors (tensor operations)</h2>
<ul>
<li><p>In deep learning, data (images, text, video, audio, protein structures, etc) gets represented as tensors.</p></li>
<li><p>A model learns by investigating those tensors and performing a series of operations (could be 1,000,000s+) on tensors to create a representation of the patterns in the input data.</p></li>
<li><p>After you have created your tensors, you can operate on them like you would do with traditional programming language types, like +, ­, *, /.</p></li>
</ul>
<section id="indexing-tensors" class="level3">
<h3 class="anchored" data-anchor-id="indexing-tensors">Indexing tensors</h3>
<p>Indexing and subsetting a tensor is similar to indexing a list.</p>
<div id="ffeeacc3" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">some_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb66-2">torch_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(some_list)</span>
<span id="cb66-3">torch_list</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>tensor([0, 1, 2, 3, 4, 5])</code></pre>
</div>
</div>
<div id="b122983e" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first element of the tensor</span></span>
<span id="cb68-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second element of the tensor</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0)
tensor(1)</code></pre>
</div>
</div>
<div id="89113b9e" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">torch_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subsetting a tensor</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>tensor([1, 2, 3])</code></pre>
</div>
</div>
</section>
<section id="transposing-tensors" class="level3">
<h3 class="anchored" data-anchor-id="transposing-tensors">Transposing Tensors</h3>
<p>Transposing 2D tensors is a simple operation using <code>t</code></p>
<div id="d9f4ecee" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>]])</span>
<span id="cb72-2">points</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>tensor([[4., 1.],
        [5., 3.],
        [2., 1.]])</code></pre>
</div>
</div>
<div id="27f6955f" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">points_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.t()</span>
<span id="cb74-2">points_t</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor([[4., 5., 2.],
        [1., 3., 1.]])</code></pre>
</div>
</div>
<p>You can also transpose 3D and higher tensors using the <code>transpose</code> method by specifying the two dimensions along which transposing (flipping shape and stride) should occur:</p>
<div id="3a4d021d" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">some_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb76-2">transpose_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> some_t.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb76-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(some_t.shape)</span>
<span id="cb76-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(transpose_t.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([3, 4, 5])
torch.Size([5, 4, 3])</code></pre>
</div>
</div>
</section>
<section id="tensor-view-operation" class="level3">
<h3 class="anchored" data-anchor-id="tensor-view-operation">Tensor View Operation</h3>
<p>Tensor view operations returns a new tensor with the same data as the self tensor but of a different shape.</p>
<div id="f528ee04" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb78-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb78-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[-0.4790,  0.8539],
        [-0.2285,  0.3081]])
torch.Size([2, 2])</code></pre>
</div>
</div>
<div id="9bd6ec01" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb80-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y)</span>
<span id="cb80-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-0.4790,  0.8539, -0.2285,  0.3081])
torch.Size([4])</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Using <code>-1</code> in the shape argument will automatically infer the correct size of the dimension.</p>
</blockquote>
<div id="769ff5f7" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the size -1 is inferred from other dimensions</span></span>
<span id="cb82-2"></span>
<span id="cb82-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(z)</span>
<span id="cb82-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(z.size())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[-0.4790,  0.8539],
        [-0.2285,  0.3081]])
torch.Size([2, 2])</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>View Does not change tensor layout in memory, Transpose() operation change the tensor layout in memory.</p>
</blockquote>
</section>
<section id="tensor-mathematical-basic-operations" class="level3">
<h3 class="anchored" data-anchor-id="tensor-mathematical-basic-operations">Tensor Mathematical Basic Operations</h3>
<p>Tensor addition is achive using <code>torch.add</code> as shown in the following example:</p>
<div id="bcdbccc2" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a tensor of values and add a number to it</span></span>
<span id="cb84-2">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb84-3">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([11, 12, 13])</code></pre>
</div>
</div>
<div id="86b43ae5" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiply it by 10</span></span>
<span id="cb86-2">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>tensor([10, 20, 30])</code></pre>
</div>
</div>
<div id="60ec40e4" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract and reassign</span></span>
<span id="cb88-2">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb88-3">tensor</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>tensor([-9, -8, -7])</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>PyTorch also has a bunch of built-in functions like torch.mul() (short for multiplcation) and torch.add() to perform basic operations.</p>
</blockquote>
<div id="2d0cb4b9" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Can also use torch functions</span></span>
<span id="cb90-2">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb90-3">torch.multiply(tensor, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiply by 10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>tensor([10, 20, 30])</code></pre>
</div>
</div>
<div id="05870f7e" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb92-2"></span>
<span id="cb92-3">torch.add(tensor, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add by 20</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>tensor([21, 22, 23])</code></pre>
</div>
</div>
<div id="0f59296f" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">torch.div(tensor, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, rounding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trunc'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># divide by 20, with truncation as a rounding_mode</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>tensor([0, 0, 0])</code></pre>
</div>
</div>
<div id="38707fc5" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">torch.div(tensor, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, rounding_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floor'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># divide by 20, with floor as a rounding_mode</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>tensor([0, 0, 0])</code></pre>
</div>
</div>
<div id="32445c20" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(tensor) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum tensor entries  [1, 2, 3]</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>tensor(6)</code></pre>
</div>
</div>
</section>
</section>
<section id="matrix-multiplication-is-all-you-need" class="level2">
<h2 class="anchored" data-anchor-id="matrix-multiplication-is-all-you-need">Matrix multiplication is all you need</h2>
<ul>
<li><p>In deep learning algorithms (like neural networks), one of the most common operations is matrix multiplication.</p></li>
<li><p>PyTorch implements matrix multiplication functionality in the torch.matmul() method.</p></li>
<li><p>The main two rules for matrix multiplication to remember are:</p></li>
</ul>
<p>The inner dimensions must match:</p>
<ul>
<li>(3, 2) @ (3, 2) won’t work</li>
<li>(2, 3) @ (3, 2) will work</li>
<li>(3, 2) @ (2, 3) will work</li>
</ul>
<p>The resulting matrix has the shape of the outer dimensions:</p>
<ul>
<li>(2, 3) @ (3, 2) -&gt; (2, 2)</li>
<li>(3, 2) @ (2, 3) -&gt; (3, 3)</li>
</ul>
<p>Note: “@” in Python is the symbol for matrix multiplication.</p>
<p>More information about matrix multiplication can be found in the <a href="https://pytorch.org/docs/stable/torch.html#torch-matmul">Matrix Multiplication</a> section.</p>
<div id="2345216a" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">tensor1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb100-2">tensor2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb100-3"></span>
<span id="cb100-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tensor1.shape)</span>
<span id="cb100-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tensor2.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([3, 4])
torch.Size([4])</code></pre>
</div>
</div>
<div id="8a214913" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.matmul(tensor1, tensor2)</span>
<span id="cb102-2">result.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>torch.Size([3])</code></pre>
</div>
</div>
<p>Note: The difference between element-wise multiplication (multiply) and matrix multiplication (matmul) is the addition of values.</p>
<ul>
<li><p>matmul: matrix multiplication</p></li>
<li><p>multiply: element-wise multiplication</p></li>
</ul>
<div id="ac375e50" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb104-2">tensor.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>torch.Size([3])</code></pre>
</div>
</div>
<p>Element-wise matrix mutlication</p>
<div id="618711e9" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tensor</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>tensor([1, 4, 9])</code></pre>
</div>
</div>
<p>Matrix multiplication</p>
<div id="056c5038" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">torch.matmul(tensor, tensor)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>tensor(14)</code></pre>
</div>
</div>
<p>Can also use the “@” symbol or <code>torch.mm()</code> for matrix multiplication, though not recommended</p>
<div id="4f32958d" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> tensor)</span>
<span id="cb110-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tensor.matmul(tensor))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(14)
tensor(14)</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>A matrix multiplication like this is also referred to as the dot product of two matrices. Neural networks are full of matrix multiplications and dot products.</p>
</blockquote>
<p>For example, <a href="https://pytorch.org/docs/1.9.1/generated/torch.nn.Linear.html"><code>torch.nn.Linear()</code></a> module (we’ll see this in action later on), also known as a feed-forward layer or fully connected layer, implements a matrix multiplication between an input <code>x</code> and a weights matrix <code>A</code>.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20x%5Ccdot%7BA%5ET%7D%20+%20b%0A"></p>
<p>Thank you for reading !</p>


</section>

 ]]></description>
  <category>Pytorch</category>
  <category>python</category>
  <guid>https://shmuhammadblog.github.io/blog/tensor/tensor.html</guid>
  <pubDate>Sun, 31 Jul 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Using command line tool to obtain data</title>
  <link>https://shmuhammadblog.github.io/blog/obtaining data/obtaininda.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>Data can be obtained in several ways—for example by downloading it from a server, querying a database, or connecting to a Web API. Sometimes, the data comes in a compressed form or in a binary format such as a Microsoft Excel Spreadsheet. Tools such as curl, tar, wget, csvtool and others can be used to download data. —Data Science at command Line</p>
</blockquote>
<p><img src="https://shmuhammadblog.github.io/blog/obtaining data/terminal2.png" class="img-fluid"></p>
<section id="downloading-from-the-internet-using-curl" class="level2">
<h2 class="anchored" data-anchor-id="downloading-from-the-internet-using-curl">Downloading from the Internet using Curl</h2>
<p><strong>Curl</strong> and <strong>wget</strong> are command line tools that allows you to download files from the Internet. curl and wget are installed by default on most Linux systems. if you do not have either tool installed, you can use the commands below to install curl and wget on Ubuntu.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install curl</span>
<span id="cb1-2">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install wget</span></code></pre></div>
<p>If you are using a Mac, you can install curl and wget using the following commands:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install curl</span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install wget</span></code></pre></div>
<section id="how-to-use-curl" class="level4">
<h4 class="anchored" data-anchor-id="how-to-use-curl">How to Use Curl</h4>
<p>The curl syntax is :</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">options</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">URL...</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> </span></code></pre></div>
<p>In its simpform, curl is used to download a file from the Internet without any options.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> example.com</span></code></pre></div>
<p>The command above will download and print the source code of the example.com homepage in your terminal window.</p>
</section>
<section id="save-the-output-to-a-file" class="level4">
<h4 class="anchored" data-anchor-id="save-the-output-to-a-file">Save the Output to a File</h4>
<p>Rather than displaying to the standard output, we can use the -o option to save the output to a file.</p>
<p>The above example will save the output to a file named example.html instead of printing it to the terminal.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> example.html example.com <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span></code></pre></div>
<p>OR</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> http://example.com <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> filename</span></code></pre></div>
<p>OR</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> example.com <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> example.html</span></code></pre></div>
<p>You can also redirect the output to a file using the &gt; operator.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> example.com <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> example.html</span></code></pre></div>
<p>Sometimes, it’s a good idea to set the verbose mode on using -V option. This may provide useful information about the progress of the download.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"></span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-v</span> example.com</span></code></pre></div>
<p>curl outputs a progress meter that shows the download rate and the expected time of completion. You can also use the -s option to hide the progress meter and the progress.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> example.com</span></code></pre></div>
</section>
<section id="following-redirects" class="level4">
<h4 class="anchored" data-anchor-id="following-redirects">Following Redirects</h4>
<p>When accessing shortened URL with curl, such as: http://bit.ly/, we need to set the -L option to automatically follow redirects</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span> http://bit.ly/</span></code></pre></div>
</section>
<section id="using-curl-to-download-from-ftp-server" class="level4">
<h4 class="anchored" data-anchor-id="using-curl-to-download-from-ftp-server">Using Curl to Download from FTP server</h4>
<p>Curl has over 20 built-in FTP commands. You can use curl to download files from FTP servers as follows:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ftp://ftp.gnu.org/welcome.msg"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">trim</span></span></code></pre></div>
</section>
<section id="how-to-use-wget-command" class="level4">
<h4 class="anchored" data-anchor-id="how-to-use-wget-command">How to use Wget Command</h4>
<p>The wget command is similar to curl, but it does not print the output to the terminal. Instead, it saves the output to a file. Its syntax is shown below:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">options</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">URL...</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>You can download a file from the Internet using wget and saved to a file with same name.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> example.com</span></code></pre></div>
<p>You can also save the output to a diffrent file name using the -O option.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> example.html example.com</span></code></pre></div>
<p>You can save in a specify folder using the -P option.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> /home/example.com example.com</span></code></pre></div>
</section>
</section>
<section id="difference-between-wget-and-curl" class="level2">
<h2 class="anchored" data-anchor-id="difference-between-wget-and-curl">Difference between Wget and Curl</h2>
<p>Wget is similar to Curl, but curl is more powerful. wget is a tool to download files from servers while curl is a tool that let’s you exchange requests/responses with a server.</p>
<p>wget’s major advantage is its ability to download recursively. Wget is command line only. There’s no library.</p>
<p>Curl is powered by libcurl - a cross-platform library with a stable API that can be used by each and everyone.</p>
<p>Curl is generally preferred since it supports more features than wget. For comparison <a href="https://curl.se/docs/comparison-table.html">here</a> is the list of features of available with different tools:</p>
</section>
<section id="other-cool-stuff-you-can-do-with-curl" class="level2">
<h2 class="anchored" data-anchor-id="other-cool-stuff-you-can-do-with-curl">Other cool stuff you can do with curl</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Get weather information with : wttr.in
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can use curl to check weather info from your terminal</p>
</div>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">!wttr.in/SanFrancisco</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to check weather in San Francisco</span></span></code></pre></div>
<p>rate.sx: Crypto prices without leaving the terminal by running curl rate.sx</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"></span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> rate.sx</span></code></pre></div>
<p>dict.org: To look up definitions for a word, run curl ‘dict.org/d:word’</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dict.org/d:word'</span></span></code></pre></div>
</section>
<section id="compressing-and-decompressing-files" class="level2">
<h2 class="anchored" data-anchor-id="compressing-and-decompressing-files">Compressing and Decompressing Files</h2>
<p>Large files can be compressed and decompressed.</p>
<section id="compressing-files-using-tar" class="level4">
<h4 class="anchored" data-anchor-id="compressing-files-using-tar">Compressing Files using tar</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-cvf</span> example.tar ~/desktop/example/</span></code></pre></div>
<p>The options used in the above command to create a tar file are:</p>
<ul>
<li>c – Creates a new .tar archive file.</li>
<li>v – Verbosely show the .tar file progress.</li>
<li>f – File name type of the archive file.</li>
</ul>
</section>
<section id="compressing-files-using-gzip" class="level4">
<h4 class="anchored" data-anchor-id="compressing-files-using-gzip">Compressing Files using gzip</h4>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> cvzf example.tar.gz /desktop/examples/</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">or</span> </span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> cvzf example.tgz /desktop/examples/</span></code></pre></div>
</section>
</section>
<section id="list-content-of-an-archive-file" class="level2">
<h2 class="anchored" data-anchor-id="list-content-of-an-archive-file">List Content of an Archive File</h2>
<p>To list the contents of an archive file, you can use the following command (with t option):</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-tvf</span> example.tar </span></code></pre></div>
</section>
<section id="decompressing-archivedd-file" class="level2">
<h2 class="anchored" data-anchor-id="decompressing-archivedd-file">Decompressing Archivedd File</h2>
<p>To uncompress an archive file, you can use the following command (with x option):</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-xvf</span> example.tar </span></code></pre></div>
<p>If you want to untar in a different directory then use option as -C (specified directory).</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-xvf</span> example.tar <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> /desktop/example/</span></code></pre></div>
<p>Finally, you can use unpack command also to decompress the file.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unpack</span> example.tar </span></code></pre></div>
</section>
<section id="csvkit-converting-and-working-with-csv-at-command-line" class="level2">
<h2 class="anchored" data-anchor-id="csvkit-converting-and-working-with-csv-at-command-line">Csvkit : converting and working with CSV at command Line</h2>
<p>csvkit is a suite of command-line tools for converting to and working with CSV, the king of tabular file formats. working with csvkit makes it easy to convert between different formats, and to work with the data in those formats.</p>
<p>You can install csvkit using the following command:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install csvkit</span></code></pre></div>
<p>We can print the contents of the file using the following command:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bat</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> data.csv</span></code></pre></div>
<p>The -A option show all non-printable characters such as space, tab, newline, etc.</p>
<p>We can also use another command called csvlook to print the contents of the file nicely.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">csvlook</span> data.csv</span></code></pre></div>
<p>Below are some of the commands that you can use with csvkit:</p>
<ul>
<li>Convert Excel to CSV:</li>
</ul>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">in2csv</span> data.xls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> data.csv  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Excel to csv</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">in2csv</span> data.json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> data.csv <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># json to csv</span></span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">csvstat</span> data.csv <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># give the statistics of the csv file</span></span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">csvjson</span> data.csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> data.json <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert csv to json</span></span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">csvcut</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> data.csv <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print column names</span></span>
<span id="cb29-10"></span>
<span id="cb29-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">csvcut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> column_a,column_c data.csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> new.csv <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select subset of columns</span></span></code></pre></div>


</section>

 ]]></description>
  <category>data science</category>
  <category>unix</category>
  <guid>https://shmuhammadblog.github.io/blog/obtaining data/obtaininda.html</guid>
  <pubDate>Tue, 31 May 2022 23:00:00 GMT</pubDate>
  <media:content url="https://shmuhammadblog.github.io/blog/obtaining data/terminal.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Copying files to and from a docker containers</title>
  <link>https://shmuhammadblog.github.io/blog/movingfilestodocker/movinfiles.html</link>
  <description><![CDATA[ 



<section id="copying-files-to-and-from-docker-container-to-a-host" class="level2">
<h2 class="anchored" data-anchor-id="copying-files-to-and-from-docker-container-to-a-host">Copying files to and from docker container to a host</h2>
<p>You can use the <code>docker cp</code> command to copy files from the host to the container or vice versa.</p>
<section id="copy-files-from-the-host-to-the-container" class="level3">
<h3 class="anchored" data-anchor-id="copy-files-from-the-host-to-the-container">Copy files from the host to the container</h3>
<p>The syntax for copying file from host to container is</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> cp <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">source</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">container:</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>destination<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span></span></code></pre></div>
<p>The example below show how to copy a file (dataset_on_host.csv) from the host to a container folder called data. We saved the file with a new name (dataset_on_container.csv) in the container folder.</p>
<p><img src="https://shmuhammadblog.github.io/blog/movingfilestodocker/host_to_docker.png" class="img-fluid"></p>
</section>
<section id="copy-files-from-the-container-to-the-host" class="level3">
<h3 class="anchored" data-anchor-id="copy-files-from-the-container-to-the-host">Copy files from the container to the host</h3>
<p>The syntax for copying file from container to host is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> cp <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">container:</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span>source <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">destination</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-2">    </span></code></pre></div>
<p>The example below also show how a file from a container is copied to the host.</p>
<p><img src="https://shmuhammadblog.github.io/blog/movingfilestodocker/dockertolocal.png" class="img-fluid"></p>
<p>Thank you for reading.</p>


</section>
</section>

 ]]></description>
  <category>data science</category>
  <category>unix</category>
  <guid>https://shmuhammadblog.github.io/blog/movingfilestodocker/movinfiles.html</guid>
  <pubDate>Tue, 31 May 2022 23:00:00 GMT</pubDate>
  <media:content url="https://shmuhammadblog.github.io/blog/movingfilestodocker/docker.png" medium="image" type="image/png" height="124" width="144"/>
</item>
<item>
  <title>Why you should start a blog?</title>
  <link>https://shmuhammadblog.github.io/blog/whyblog/whyblog.html</link>
  <description><![CDATA[ 



<blockquote class="blockquote">
<p>My mentor, <a href="https://ruder.io">Sebastian Ruder</a> advises PhD students to write blogs and has this to say: “Having a blog is the single thing that has led to the most positive interactions throughout my PhD.”<sup>1</sup></p>
</blockquote>
<p>I was inspired, but I’ve been holding off writing blog posts consistently. I started in 2020 and stopped after two blog posts.&nbsp;Recently, I read a blog post by the co-founder of fast.ai, Rachel Thomas, “Why you should write blogpost”<sup>2</sup> and watched an RStudio talk by David Robinson, “The unreasonable effectiveness of public work.”<sup>3</sup> Both Rachel and David convinced me about the benefits of writing a blog post. Therefore, I braced up to start blogging consistently at least once fortnightly. As a Ph.D.&nbsp;student, writing habits will strongly build my writing and creativity muscles to the max.</p>
<p><img src="https://shmuhammadblog.github.io/blog/whyblog/lets-try.jpg" title="Lets try" class="img-fluid"></p>
<p>There are many reasons one writes a blog. For me, below are only five reasons I think a blog will help me along the way of building my career.</p>
<section id="deliberate-practice" class="level2">
<h2 class="anchored" data-anchor-id="deliberate-practice">Deliberate practice</h2>
<p>Deliberate practice&nbsp;is a systematic, focused, consistent, goal-oriented training that builds expertise or improves performance.<sup>4</sup><sup>5</sup> Building expertise in any field is not a marathon; it is a series of Sprints. Evidence has shown that experts or geniuses are always made, not born<sup>6</sup> <sup>7</sup>. For example, bodybuilders, musicians, and footballers consistently practice to achieve mastery. No one becomes an expert from day one. The same is also true for writing and any other skills. Consistent writing, even small content but engaging and informative, will improve your writing skills. As we fondly say, “practice makes perfect.” Consistent practice allows one to do a task while thinking about other things. For example, a professional orator can deliver an excellent speech without reading from any single note. Stopping to think about the task can sometimes result in a flawless performance. People refer to this performance as being “in the zone. Aristotle said:”We are what we repeatedly do. Excellence, then, is not an act, but a habit.”&nbsp;</p>
<p>Deliberate practice does not make what we learn easier; it changes the brain (Myelination). This concept is notably expressed as “<em>cells that fire together, wire together</em>.” Sometimes, we reach an “aha!” moment when learning difficult stuff - that is when someone has been struggling to understand a concept, and it suddenly becomes apparent - the clarity does not come out of nowhere.</p>
<blockquote class="blockquote">
<p>Rather, it results from a steady accumulation of information. That’s because adding additional information opens up memories associated with the task. Once those memory neurons are active, they can form new connections. They also can form stronger connections within an existing network. Over time, your level of understanding increases until you suddenly “get” it <sup>8</sup>.</p>
</blockquote>
<p>Therefore, this blog will serve as a way for me to do deliberate practices of many skills (writing, machine learning, visualization, python, r and, many more)</p>
</section>
<section id="repository-for-my-future-self" class="level2">
<h2 class="anchored" data-anchor-id="repository-for-my-future-self">Repository for my future self</h2>
<p>I am absent-minded. I write code and forget how I did it or google the same thing many times So, anything that I often google or write a complex program, I will write a blog post on it. That way, I will refer to it. Hadley Wickham inspired me in his book R for Data Science; he said, if you write the same code three times, then, you write a function for that code. Hadley’s idea was adapted from code refactoring rule of thumb (Rule of three), which states that “two instances of similar code don’t require refactoring, but when similar code is used three times, it should be extracted into a new procedure.”<sup>9</sup></p>
<p><img src="https://shmuhammadblog.github.io/blog/whyblog/write-blog.png" class="img-fluid"></p>
</section>
<section id="build-public-profile-and-network" class="level2">
<h2 class="anchored" data-anchor-id="build-public-profile-and-network">Build public profile and network</h2>
<p>Putting your work or your skills to the public is a way to put your best foot forwards. Public work can be anything like Tweets, Blog post, GitHub Repo, or Book. Like-minded people with related interests may find your blog post, network with you, and give you feedback. Many opportunities may come in your future career from the network you build. An example of this was when David Robinson answered a question on Stack Overflow<sup>10</sup>, Stack Overflow engineer saw the brilliant answer and hired him (his first job at Stack Overflow). So, a blog allows one to showcase his skills, and other people can benefit from it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shmuhammadblog.github.io/blog/whyblog/book-davide.jpg" title="Tweet-Blog-Book" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Tweet transformed to a blog and book.</figcaption>
</figure>
</div>
</section>
<section id="learning-by-teaching-protégé-effect" class="level2">
<h2 class="anchored" data-anchor-id="learning-by-teaching-protégé-effect">Learning by teaching (protégé effect)</h2>
<p>Robert Heinlein said, when one teaches, two learn. It means whenever you teach or explain a concept to someone, you will learn something from it or get a better insight and ultimately reach the “aha” moment. Therefore, writing a good tutorial about a brain-bending concept without dumbing it down is a great way to learn and increase visibility. As Einstein says, “If you can’t explain it simply, you don’t understand it well enough.” A study<sup>11</sup> found that when students teach the lesson’s content (active learning), they develop a more in-depth and longer-lasting understanding of the material than students who do not teach it( passive learning). Therefore, this blog will allow me to write my research and summary of papers and man more. The approach of learning by teaching was widely known as Feynman learning technique<sup>12</sup></p>
<p><img src="https://shmuhammadblog.github.io/blog/whyblog/feyman.jpg" title="Feyman Learning techniques" class="img-fluid"></p>
</section>
<section id="share-my-experience-and-opportunites" class="level2">
<h2 class="anchored" data-anchor-id="share-my-experience-and-opportunites">Share&nbsp;my experience and opportunites:</h2>
<p>I naturally love to share my experience and other opportunities with people I know. Therefore, a blog post will serve as a way to share important resources that I come across and find useful. This will benefit a wider audience.</p>
<style>
body {
text-align: justify}
</style>


</section>
<aside id="footnotes" class="footnotes footnotes-end-of-document">
<hr>
<ol>
<li id="fn1"><p><a href="https://ruder.io/10-tips-for-research-and-a-phd/index.html#6-write-a-blog-">10 Tips for Research and a PhD</a>↩︎</p></li>
<li id="fn2"><p><a href="https://medium.com/@racheltho/why-you-yes-you-should-blog-7d2544ac1045">Why you (yes, you) should blog</a>↩︎</p></li>
<li id="fn3"><p><a href="https://www.youtube.com/watch?v=th79W4rv67g&amp;ab_channel=RStudio">“The unreasonable effectiveness of public work</a>↩︎</p></li>
<li id="fn4"><p><a href="https://jamesclear.com/deliberate-practice-myth"><strong>T</strong>he Myth and Magic of Deliberate Practice</a>↩︎</p></li>
<li id="fn5"><p><a href="https://jamesclear.com/atomic-habits">Atomic Habits: Tiny Changes, Remarkable Results.</a>↩︎</p></li>
<li id="fn6"><p><a href="https://en.wikipedia.org/wiki/L%C3%A1szl%C3%B3_Polg%C3%A1r">Geniuses are made, not born.</a>↩︎</p></li>
<li id="fn7"><p><a href="https://hbr.org/2007/07/the-making-of-an-expert" title="The making of an expert from Havard Business Review">The making of an expert</a>↩︎</p></li>
<li id="fn8"><p><a href="https://www.sciencenewsforstudents.org/article/learning-rewires-brain">Learning rewires the brain</a>↩︎</p></li>
<li id="fn9"><p><a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)#">Rule of three</a>↩︎</p></li>
<li id="fn10"><p><a href="https://stats.stackexchange.com/questions/47771/what-is-the-intuition-behind-beta-distribution">David Robinson’s Stackoverflow Answer that landed him job</a>↩︎</p></li>
<li id="fn11"><p><a href="https://www.edsurge.com/news/2019-01-24-want-students-to-remember-what-they-learn-have-them-teach-it">Want Students to Remember What They Learn? Have Them Teach It</a>↩︎</p></li>
<li id="fn12"><p><a href="https://fs.blog/2012/04/feynman-technique/">The Feynman Technique: The Best Way to Learn Anything</a>↩︎</p></li>
</ol>
</aside>

 ]]></description>
  <category>Books</category>
  <guid>https://shmuhammadblog.github.io/blog/whyblog/whyblog.html</guid>
  <pubDate>Mon, 30 May 2022 23:00:00 GMT</pubDate>
  <media:content url="https://shmuhammadblog.github.io/blog/whyblog/featured.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
